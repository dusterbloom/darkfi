window.SIDEBAR_ITEMS = {"struct":[["FixedMersenne","A modular reducer for (pseudo) Mersenne numbers `2^P - K` as modulus. It supports `P` up to 127 and `K < 2^(P-1)`"],["Montgomery","A modular reducer based on Montgomery form, only supports odd modulus."],["PreInv","Pre-computation for fast divisibility check."],["ReducedInt","An integer in a modulo ring"],["Vanilla","A plain reducer that just use normal [Rem] operators. It will keep the integer in range [0, modulus) after each operation."],["udouble","A double width integer type based on the largest built-in integer type [umax] (currently [u128]), and to support double-width operations on it is the only goal for this type."]],"trait":[["DivExact","Utility function for exact division, with precomputed helper values"],["ModularAbs","Provides a utility function to convert signed integers into unsigned modular form"],["ModularCoreOps","Core modular arithmetic operations."],["ModularInteger","Represents an number defined in a modulo ring ℤ/nℤ"],["ModularOps","Collection of common modular arithmetic operations"],["ModularPow","Modular power functions"],["ModularRefOps","Collection of operations similar to [ModularOps], but takes operands with references"],["ModularSymbols","Math symbols related to modular arithmetics"],["ModularUnaryOps","Core unary modular arithmetics"],["Reducer","A modular reducer that can ensure that the operations on integers are all performed in a modular ring."]],"type":[["FixedMersenneInt","An integer in modulo ring with a fixed (pseudo) Mersenne number as modulus"],["MontgomeryInt","An integer in modulo ring based on Montgomery form"],["VanillaInt","An integer in modulo ring based on conventional [Rem] operations"],["umax","Alias of the builtin integer type with max width (currently [u128])"]]};